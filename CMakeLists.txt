cmake_minimum_required(VERSION 3.15)

project(alert)

option(WITH_SIMD "Build alert module with SIMD support" OFF)

set(LINKER_FLAGS "${LINKER_FLAGS} -s WASM=1")
set(LINKER_FLAGS "${LINKER_FLAGS} -s NO_EXIT_RUNTIME=1")
set(LINKER_FLAGS "${LINKER_FLAGS} -s ALLOW_MEMORY_GROWTH=1")
set(LINKER_FLAGS "${LINKER_FLAGS} -s EXPORT_NAME='Alert'")
set(LINKER_FLAGS "${LINKER_FLAGS} -s EXPORT_ES6=1")
set(LINKER_FLAGS "${LINKER_FLAGS} -s MODULARIZE=1")
set(LINKER_FLAGS "${LINKER_FLAGS} -s ENVIRONMENT='web,worker'")
set(LINKER_FLAGS "${LINKER_FLAGS} -s USE_ES6_IMPORT_META=0")

set(COMPILER_FLAGS "${COMPILER_FLAGS} -O3")

if (WITH_SIMD)
  set(COMPILER_FLAGS "${COMPILER_FLAGS} -msimd128")
endif()

set(LINKER_FLAGS "-s EXPORTED_FUNCTIONS=['_main','_malloc','_free'] -s EXPORTED_RUNTIME_METHODS=['ccall','cwrap'] ${LINKER_FLAGS}")

if (WITH_SIMD)
  set(PREFIX_SIMD "_simd")
endif()

set(TARGET_NAME "alert${PREFIX_SIMD}")

add_executable(${TARGET_NAME} ${CMAKE_CURRENT_SOURCE_DIR}/alert.cpp)

set_target_properties(${TARGET_NAME} PROPERTIES LINK_FLAGS ${LINKER_FLAGS} COMPILE_FLAGS ${COMPILER_FLAGS})

IF(WITH_SIMD STREQUAL "ON")
    target_compile_definitions(${TARGET_NAME} PUBLIC WITH_SIMD)
ENDIF()

install(TARGETS ${TARGET_NAME} RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}" LIBRARY DESTINATION "${CMAKE_INSTALL_PREFIX}")
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${TARGET_NAME}.wasm DESTINATION ${CMAKE_INSTALL_PREFIX})
install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/DetectWasmAndSimdSupport.html DESTINATION ${CMAKE_INSTALL_PREFIX})